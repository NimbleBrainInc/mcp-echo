[project]
name = "mcp-echo"
version = "1.0.0"
description = "Simple echo MCP service for testing MCP protocol functionality"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
authors = [
    { name = "NimbleBrain Inc", email = "hello@nimblebrain.ai" },
]
keywords = ["mcp", "echo", "testing", "nimblebrain"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "fastmcp>=2.11.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=1.1.0",
    "httpx>=0.28.1",
    "requests>=2.32.4",
]

[project.urls]
Homepage = "https://github.com/NimbleBrainInc/mcp-echo"
Repository = "https://github.com/NimbleBrainInc/mcp-echo.git"
Issues = "https://github.com/NimbleBrainInc/mcp-echo/issues"

[project.scripts]
mcp-echo = "server:main"

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1", 
    "pytest-asyncio>=1.1.0",
    "httpx>=0.28.1",
    "requests>=2.32.4",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]

[tool.coverage.run]
source = ["server"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["B011"]